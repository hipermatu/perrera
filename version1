// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;
pragma experimental ABIEncoderV2;

import "@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol";
import "hardhat/console.sol";
//import "./PriceConsumer.sol";

contract PriceConsumerV3 {
    AggregatorV3Interface internal priceFeed;
    constructor() public {
        priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);
    }

    function getLatestPrice() private view returns (int) {
        (,int price,,,) = priceFeed.latestRoundData();
        return(price);
    }
    function getConversionRate(uint256 ethAmount) public view returns(uint256){
        uint256 ethPrice = uint256(getLatestPrice());
        uint256 ethAmountInUSD = (ethPrice * ethAmount) / 100000000;
        return ethAmountInUSD; 
    }
    function getConversionRateUsdToEth(uint256 usdPrice) public view returns(uint256){
        uint256 ethPrice = uint256(getLatestPrice());
        uint256 OneEthInUSD = (ethPrice * 1) / 100000000;
        uint256 oneUsdInEth = usdPrice/OneEthInUSD;
        return oneUsdInEth; 
    }
    
}

contract Perrera is PriceConsumerV3 {

    address private owner;
    address public contractAddress;
    address[] localUsuarios;

    uint min = 1 minutes;
    uint cantUsuarios =0;
    uint cantPerrosSus =0;

    enum estadoSuscripcion {
        activa,
        inactiva,
        noSuscripto
    }

    constructor(){
        owner = msg.sender;
        contractAddress = address(this); 
    }

    struct usuario{
        string nombre;
        uint id;
        uint cantidadPerros;
        uint horaSuscripcion;
        uint tiempoSuscripcion;
        estadoSuscripcion susStatus;
    }

    struct perro{
        string nombre;
        string raza;
        uint id_perro;
        uint peso;
        string estado;
    }


    usuario[] public Usuarios;
    mapping (address => usuario) direccionDatosU;
    mapping (address => bool) suscripcionActiva;
    mapping (bytes32 => perro) perroSuscripto;
    perro[] aAdoptar;

    event persona_suscripta(bool);
    event persona_resuscripta(bool);
    event perro_suscripto(bool);
    event perro_adoptado(bool);

    modifier soloPerrera(address _dir) {
        require(_dir==owner,"Usted no tiene acceso a esta opcion");
        _;
    }
    modifier soloSuscripto(address _dir) {
        require((direccionDatosU[_dir].susStatus==estadoSuscripcion.activa),"Usted no tiene usa suscripcion activa");
        require((direccionDatosU[msg.sender].horaSuscripcion+direccionDatosU[msg.sender].tiempoSuscripcion)>block.timestamp, "Tiempo de suscripcion agotado");
        _;
    }
    modifier soloUsuario(address _dir) {
        require((direccionDatosU[_dir].susStatus==estadoSuscripcion.activa) || (direccionDatosU[_dir].susStatus==estadoSuscripcion.inactiva),"Usted no es usuario");
        _;
    }

    function getOwner() public view returns(address){
        return owner;
    }

    // Vamos a suscribirnos por 10 dolares, debera ingresar el valor en ether. 6180622.512299438
    function suscribirsePerrera (string memory _nombre, uint _id, uint _tiempoSuscripcion) public payable{
        //uint256 msgInUSD = getConversionRate(msg.value);
        require(msg.value >= 0.00619 ether,"Debe suscribirse por 10 USD por mes");
        console.log("Se ha suscripto correctamente");
        direccionDatosU[msg.sender] = usuario(_nombre, _id, 0, block.timestamp,(_tiempoSuscripcion * min), estadoSuscripcion.activa);
        emit persona_suscripta(true);
    }

    function setStatus(estadoSuscripcion state) internal {
        direccionDatosU[msg.sender].susStatus = state;
    }

    //muetra el estado del usuario suscripto o no suscripto.
    function verDatosUsuario () public view soloUsuario(msg.sender) returns(string memory, uint, uint, uint, uint, estadoSuscripcion )  {
        return (direccionDatosU[msg.sender].nombre, direccionDatosU[msg.sender].id, direccionDatosU[msg.sender].cantidadPerros, direccionDatosU[msg.sender].horaSuscripcion, direccionDatosU[msg.sender].tiempoSuscripcion, direccionDatosU[msg.sender].susStatus);
    }

    // Mostrar el balance
    function showBalance() public view soloPerrera(msg.sender) {
        console.log(address(this).balance);
    }

    //Devolver el ether al contrato principal
    function withdraw() external soloPerrera(msg.sender){
        address payable _owner =  payable(address(uint160(getOwner())));
        _owner.transfer(address(this).balance);
    }

    function suscribirPerro (string memory _nombre, string memory _raza, uint _id_perro, uint _peso) public soloSuscripto(msg.sender) {
        uint nPerros = direccionDatosU[msg.sender].cantidadPerros;
        nPerros += 1; //sumamos un perro mas a la lista de animales
        direccionDatosU[msg.sender].cantidadPerros = nPerros;
        uint casi_hash = uint256(uint160(msg.sender)) + nPerros; //creamos un hash nuevo con 
        bytes32 hash = keccak256(abi.encodePacked(casi_hash)); 
        perroSuscripto[hash] = perro(_nombre, _raza, _id_perro, _peso,"D");
        emit perro_suscripto(true);
        //totalPerros.push(perroSuscripto[hash]);
        cantPerrosSus = cantPerrosSus +1;
    }

    function verDatosPerros(uint _nPerro) public view soloSuscripto(msg.sender) returns(string memory, string memory, uint, uint,string memory) {
        require(_nPerro != 0, "Debe ingresar un numero de animal mayor a 0");
        require(_nPerro <= direccionDatosU[msg.sender].cantidadPerros, "Usted no tiene este numero de perro suscripto");
        uint hash_intermedio = uint256(uint160(msg.sender)) + _nPerro; //Reproduzco HASH
        bytes32 hash_final = keccak256(abi.encodePacked(hash_intermedio));
        return (perroSuscripto[hash_final].nombre,perroSuscripto[hash_final].raza,perroSuscripto[hash_final].id_perro,perroSuscripto[hash_final].peso,perroSuscripto[hash_final].estado); //busco y devuelvo el perro correspondiente al hash generado
    }

    function verificarSuscripcion() public returns(string memory, uint) {
        int _hSus=int(direccionDatosU[msg.sender].horaSuscripcion);
        int _tSus=int(direccionDatosU[msg.sender].tiempoSuscripcion);
        int _dTime=(_hSus+_tSus)-int(block.timestamp);
        if (_dTime < 0){
            _dTime = 0;
        } 
        console.log(uint(_dTime));
        if (_dTime > 0) {
            console.log(uint(_dTime));
            return("Tiempo de suscripcion restante: ",uint(_dTime ));
        } else {
            suscripcionActiva[msg.sender]=false;
            return("Tiempo de suscripcion Terminado ",0 );
        }
    }

    function reSuscribirse(uint _id, uint _tiempoSuscripcion, uint _precio) public {
        console.log(suscripcionActiva[msg.sender]);
        require(_id==direccionDatosU[msg.sender].id,"Usted no es usuario de la perrera");
        require(direccionDatosU[msg.sender].susStatus == estadoSuscripcion.inactiva,"Usted tiene una suscripcion activa");
        //require(suscripcionActiva[msg.sender]==false,"Usted tiene una suscripcion activa");
        require(_precio >= 1,"Debe resuscribirse por 0.001");
        direccionDatosU[msg.sender].tiempoSuscripcion = (_tiempoSuscripcion * min);
        direccionDatosU[msg.sender].horaSuscripcion = block.timestamp;
        direccionDatosU[msg.sender].susStatus = estadoSuscripcion.activa;
        emit persona_resuscripta(true);
    }
    /*function mostrarUsuarios() public view soloPerrera(msg.sender) returns(address[] memory) {
        require(localUsuarios.length>0);
        console.log("Existen usuarios",localUsuarios.length);
        return(localUsuarios);
    }
    /*function ponerAdopcion(string memory _nombre, string memory _raza, uint _id_perro, uint _peso) public soloPerrera(msg.sender){
        aAdoptar.push(perro(_nombre,_raza,_id_perro,_peso,"A"));
    }
    //Los animales se podrÃ¡s adoptar solo si los potenciales duenios se suscriben a la perrera primero.
    /*function verAdopcion() public view soloSuscripto(msg.sender) returns(perro[] memory){
        return(aAdoptar);
    }
    /*function adoptarPerro(uint _id) public soloSuscripto(msg.sender) {
        uint _cantH = aAdoptar.length;
        uint _nPerros = direccionDatosU[msg.sender].cantidadPerros;
        //Preparo Hash
        uint casi_hash = uint256(uint160(msg.sender)) + _nPerros; //creamos un hash nuevo con 
        bytes32 hash = keccak256(abi.encodePacked(casi_hash)); 
        console.log(aAdoptar[0].id_perro);
        console.log(_cantH);
        for (uint i = 0; i>=_cantH; i++){
            console.log(aAdoptar[i].id_perro);
            if (_id == aAdoptar[i].id_perro){
                _nPerros += 1; //sumamos un perro mas a la lista de animales del usuario
                direccionDatosU[msg.sender].cantidadPerros = _nPerros;
                perroSuscripto[hash] = perro(aAdoptar[i].nombre,aAdoptar[i].raza,aAdoptar[i].id_perro, aAdoptar[i].peso,"D");
                emit perro_adoptado(true);
                cantPerrosSus = cantPerrosSus +1;
            } 
        }
    }*/

}
